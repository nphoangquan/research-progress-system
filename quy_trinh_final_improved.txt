╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   HỆ THỐNG THEO DÕI TIẾN TRÌNH NGHIÊN CỨU KHOA HỌC CHO SINH VIÊN          ║
║              QUY TRÌNH XÂY DỰNG CẢI TIẾN - ĐỒ ÁN TỐT NGHIỆP                ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

📌 MỤC LỤC
══════════════════════════════════════════════════════════════════════════════
I.   TỔNG QUAN DỰ ÁN
II.  TECH STACK KHUYẾN NGHỊ
III. THIẾT KẾ HỆ THỐNG
IV.  DATABASE SCHEMA CHI TIẾT
V.   USE CASES CHÍNH
VI.  QUY TRÌNH XÂY DỰNG (12 TUẦN)
VII. RAG PIPELINE CHI TIẾT
VIII.TESTING & EVALUATION
IX.  DEPLOYMENT
X.   RỦI RO & GIẢI PHÁP

══════════════════════════════════════════════════════════════════════════════
I. TỔNG QUAN DỰ ÁN
══════════════════════════════════════════════════════════════════════════════

🎯 MỤC TIÊU
Xây dựng hệ thống web giúp:
- Sinh viên: Quản lý và theo dõi tiến độ nghiên cứu, upload báo cáo
- Giảng viên: Giám sát tiến độ, nhận xét, hỏi đáp nhanh với AI
- AI Assistant: Trả lời câu hỏi dựa trên nội dung báo cáo (RAG)

📊 PHẠM VI (MVP - Phù hợp đồ án 3 tháng)
✅ CÓ:
  - Quản lý người dùng (3 roles: Admin, Lecturer, Student)
  - Quản lý projects & tasks
  - Upload & quản lý documents
  - RAG-based Q&A system
  - UI responsive, hiện đại
  - Basic notification system

❌ KHÔNG CÓ (để tránh quá tải):
  - Real-time collaboration
  - Complex role permissions (chỉ 3 roles cơ bản)
  - Mobile app
  - Advanced analytics/dashboard
  - Email notification system
  - Multi-language support

🎓 TÍNH MỚI & ĐÓNG GÓP
- Áp dụng RAG để trích xuất thông tin từ báo cáo khoa học
- Tích hợp AI vào quy trình quản lý nghiên cứu
- Giảm thời gian tìm kiếm thông tin cho giảng viên

══════════════════════════════════════════════════════════════════════════════
II. TECH STACK KHUYẾN NGHỊ
══════════════════════════════════════════════════════════════════════════════

🎨 FRONTEND
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Framework:        React 18 + Vite
Styling:          TailwindCSS + Shadcn/ui
State Management: React Query (TanStack Query)
Routing:          React Router v6
Form:             React Hook Form + Zod
HTTP Client:      Axios
UI Components:    Shadcn/ui, Lucide Icons

📝 LÝ DO CHỌN:
  - Vite: build nhanh, hot reload mượt
  - TailwindCSS: styling nhanh, responsive dễ
  - React Query: cache & sync data tự động
  - Shadcn/ui: components đẹp, customizable

🖥️ BACKEND
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Runtime:          Node.js 20 LTS
Framework:        Express.js
ORM:              Prisma
Auth:             JWT + bcrypt
Validation:       Zod
File Upload:      Multer
API Doc:          Swagger (optional)

📝 LÝ DO CHỌN:
  - Prisma: ORM hiện đại, type-safe, migration dễ
  - Express: popular, nhiều tài liệu
  - JWT: stateless, dễ implement

🗄️ DATABASE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Primary DB:       PostgreSQL 16
Vector DB:        ChromaDB
Cache:            (Optional) Redis

📝 LÝ DO CHỌN POSTGRESQL:
  ✅ Quan hệ dữ liệu rõ ràng (users ↔ projects ↔ documents)
  ✅ ACID compliance (đảm bảo tính toàn vẹn)
  ✅ Hỗ trợ JSON field (linh hoạt nếu cần)
  ✅ Free hosting: Supabase, Neon, Railway
  ✅ Prisma support tốt

📝 LÝ DO CHỌN CHROMADB:
  ✅ Open-source, miễn phí
  ✅ Dễ setup (pip install chromadb)
  ✅ Built-in embedding functions
  ✅ Persist data local hoặc Docker
  ✅ API đơn giản, tài liệu tốt
  ❌ Không dùng FAISS: khó persist, không có metadata filtering tốt
  ❌ Không dùng Pinecone: mất phí sau free tier

🤖 AI SERVICE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Language:         Python 3.11+
Framework:        FastAPI
RAG Framework:    LangChain
Embedding:        OpenAI text-embedding-3-small (HOẶC sentence-transformers)
LLM:              OpenAI GPT-4o-mini (hoặc GPT-3.5-turbo nếu tiết kiệm)
PDF Processing:   PyPDF2, LangChain document loaders
Text Splitting:   RecursiveCharacterTextSplitter

📝 LÝ DO CHỌN:
  - OpenAI API: Chất lượng tốt, dễ dùng, có $5-18 free credits
  - LangChain: Framework RAG hoàn chỉnh, nhiều integrations
  - FastAPI: Async, nhanh, auto OpenAPI docs

💾 FILE STORAGE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Development:      Local filesystem (./uploads)
Production:       Cloudinary (free 25GB) HOẶC Firebase Storage

📝 LÝ DO:
  ✅ Cloudinary: Free tier hào phóng, CDN tự động, dễ integrate
  ✅ Đơn giản hơn MinIO/S3 cho đồ án

🐳 DEPLOYMENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Containerization: Docker + Docker Compose
Frontend Host:    Vercel / Netlify (free)
Backend Host:     Render / Railway (free tier)
Database Host:    Neon / Supabase (free tier)

══════════════════════════════════════════════════════════════════════════════
III. THIẾT KẾ HỆ THỐNG
══════════════════════════════════════════════════════════════════════════════

📐 KIẾN TRÚC TỔNG QUAN
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌──────────────────────────────────────────────────────────────────┐
│                          WEB BROWSER                             │
│                      (React + TailwindCSS)                       │
└────────────────────────┬─────────────────────────────────────────┘
                         │ HTTPS/REST
                         ▼
┌──────────────────────────────────────────────────────────────────┐
│                    NODE.JS BACKEND (Express)                     │
│  ┌──────────────────────────────────────────────────────────┐   │
│  │  Auth  │  Users  │  Projects  │  Tasks  │  Documents    │   │
│  └──────────────────────────────────────────────────────────┘   │
└──────┬────────────────────────────────────────┬──────────────────┘
       │                                        │ HTTP
       │                                        ▼
       │                         ┌─────────────────────────────┐
       │                         │   PYTHON AI SERVICE         │
       │                         │      (FastAPI + RAG)        │
       │                         └──────────┬──────────────────┘
       │                                    │
       ▼                                    ▼
┌──────────────────┐            ┌──────────────────────────────┐
│   PostgreSQL     │            │  ChromaDB (Vector Store)     │
│  (Main Data)     │            │    (Embeddings + Docs)       │
└──────────────────┘            └──────────────────────────────┘

🔐 BẢO MẬT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- Password: bcrypt hash (salt rounds: 10)
- JWT: Access token (15min) + Refresh token (7 days)
- API: Rate limiting (express-rate-limit)
- File upload: Whitelist extensions (.pdf, .docx), max 10MB
- SQL Injection: Prisma parameterized queries
- XSS: Helmet.js middleware

══════════════════════════════════════════════════════════════════════════════
IV. DATABASE SCHEMA CHI TIẾT
══════════════════════════════════════════════════════════════════════════════

📊 ERD & PRISMA SCHEMA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USERS & AUTHENTICATION
// ============================================================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  fullName      String    @map("full_name")
  role          Role      @default(STUDENT)
  studentId     String?   @unique @map("student_id") // Mã số sinh viên
  avatarUrl     String?   @map("avatar_url")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  projectsAsStudent   Project[] @relation("StudentProjects")
  projectsAsLecturer  Project[] @relation("LecturerProjects")
  tasks               Task[]
  notifications       Notification[]
  aiQueries           AIQuery[]

  @@map("users")
}

enum Role {
  ADMIN
  LECTURER
  STUDENT
}

// ============================================================================
// PROJECTS & RESEARCH MANAGEMENT
// ============================================================================

model Project {
  id              String    @id @default(uuid())
  title           String
  description     String    @db.Text
  studentId       String    @map("student_id")
  lecturerId      String    @map("lecturer_id")
  status          ProjectStatus @default(IN_PROGRESS)
  startDate       DateTime  @map("start_date")
  endDate         DateTime? @map("end_date")
  progress        Int       @default(0) // 0-100%
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  student         User      @relation("StudentProjects", fields: [studentId], references: [id], onDelete: Cascade)
  lecturer        User      @relation("LecturerProjects", fields: [lecturerId], references: [id], onDelete: Restrict)
  tasks           Task[]
  documents       Document[]
  aiQueries       AIQuery[]
  notifications   Notification[]

  @@index([studentId])
  @@index([lecturerId])
  @@map("projects")
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  CANCELLED
}

// ============================================================================
// TASKS & MILESTONES
// ============================================================================

model Task {
  id              String    @id @default(uuid())
  projectId       String    @map("project_id")
  title           String
  description     String?   @db.Text
  assigneeId      String    @map("assignee_id")
  status          TaskStatus @default(TODO)
  priority        Priority  @default(MEDIUM)
  dueDate         DateTime? @map("due_date")
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee        User      @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([assigneeId])
  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

// ============================================================================
// DOCUMENTS & FILES
// ============================================================================

model Document {
  id              String    @id @default(uuid())
  projectId       String    @map("project_id")
  fileName        String    @map("file_name")
  fileUrl         String    @map("file_url")
  fileSize        Int       @map("file_size") // bytes
  mimeType        String    @map("mime_type")
  uploadedBy      String    @map("uploaded_by")
  description     String?   @db.Text
  
  // AI Processing Status
  indexStatus     IndexStatus @default(PENDING) @map("index_status")
  indexedAt       DateTime?   @map("indexed_at")
  chunkCount      Int?        @map("chunk_count")
  errorMessage    String?     @map("error_message") @db.Text
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chunks          DocumentChunk[]

  @@index([projectId])
  @@index([indexStatus])
  @@map("documents")
}

enum IndexStatus {
  PENDING     // Đang chờ xử lý
  PROCESSING  // Đang embedding
  INDEXED     // Đã hoàn thành
  FAILED      // Lỗi
}

// ============================================================================
// DOCUMENT CHUNKS (For RAG)
// ============================================================================

model DocumentChunk {
  id              String    @id @default(uuid())
  documentId      String    @map("document_id")
  content         String    @db.Text
  chunkIndex      Int       @map("chunk_index")
  vectorId        String    @map("vector_id") // ChromaDB ID
  metadata        Json?     // {page: 5, section: "Method"}
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@index([documentId])
  @@map("document_chunks")
}

// ============================================================================
// AI QUERIES & RESPONSES
// ============================================================================

model AIQuery {
  id              String    @id @default(uuid())
  projectId       String    @map("project_id")
  userId          String    @map("user_id")
  question        String    @db.Text
  answer          String    @db.Text
  sources         Json      // [{doc_id, chunk_id, page, relevance_score}]
  responseTime    Int       @map("response_time") // milliseconds
  feedback        Feedback? // User rating
  feedbackComment String?   @map("feedback_comment") @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@map("ai_queries")
}

enum Feedback {
  HELPFUL
  NOT_HELPFUL
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

model Notification {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  projectId       String?   @map("project_id")
  type            NotificationType
  title           String
  message         String    @db.Text
  isRead          Boolean   @default(false) @map("is_read")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("notifications")
}

enum NotificationType {
  DOCUMENT_UPLOADED
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT_ADDED
  DEADLINE_APPROACHING
  PROJECT_STATUS_CHANGED
}

// ============================================================================
// DATABASE VIEWS & STATISTICS (Optional)
// ============================================================================

// Có thể thêm các view để tính toán thống kê nhanh:
// - Project completion rate
// - Document index success rate
// - Average AI response time

══════════════════════════════════════════════════════════════════════════════
V. USE CASES CHÍNH
══════════════════════════════════════════════════════════════════════════════

🎭 USE CASE 1: Sinh viên upload báo cáo
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ACTOR: Student

PRECONDITIONS:
  - Sinh viên đã đăng nhập
  - Có ít nhất 1 project được assigned

MAIN FLOW:
  1. Sinh viên vào trang "My Projects"
  2. Chọn project cần upload báo cáo
  3. Click "Upload Document"
  4. Chọn file PDF/DOCX (max 10MB)
  5. Nhập mô tả (optional)
  6. Click "Submit"
  7. Hệ thống validate file
  8. Upload file lên Cloudinary
  9. Lưu metadata vào PostgreSQL (status: PENDING)
  10. Gọi API Python để index document (async)
  11. Hiển thị "Upload successful, indexing in progress..."
  12. Tạo notification cho giảng viên hướng dẫn

POSTCONDITIONS:
  - Document được lưu trong DB
  - File được lưu trên cloud storage
  - Notification được tạo
  - Background job index document trong ChromaDB

ALTERNATIVE FLOWS:
  - 7a. File không hợp lệ → hiển thị lỗi, yêu cầu chọn lại
  - 10a. Python service down → mark status FAILED, retry sau 5 phút

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎭 USE CASE 2: Giảng viên hỏi AI về báo cáo
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ACTOR: Lecturer

PRECONDITIONS:
  - Giảng viên đã đăng nhập
  - Project có ít nhất 1 document đã INDEXED

MAIN FLOW:
  1. Giảng viên vào project của sinh viên
  2. Click tab "AI Assistant"
  3. Nhập câu hỏi: "Phương pháp nghiên cứu được đề cập là gì?"
  4. Click "Ask" hoặc Enter
  5. Frontend gọi POST /api/ai/query
  6. Backend verify JWT + project access
  7. Backend forward request đến Python service
  8. Python service:
     a. Embed câu hỏi
     b. Query ChromaDB → top 5 chunks
     c. Build context + prompt
     d. Call OpenAI GPT-4o-mini
     e. Parse response + sources
  9. Python trả JSON về Node
  10. Node lưu query vào database
  11. Node trả response về frontend
  12. Frontend hiển thị:
      - Câu trả lời
      - List sources (document name, page, relevance)
      - Feedback buttons (👍/👎)

POSTCONDITIONS:
  - Query được log vào ai_queries table
  - Giảng viên nhận được câu trả lời + trích dẫn

ALTERNATIVE FLOWS:
  - 8a. Không tìm thấy context → trả lời "Không đủ thông tin"
  - 8b. OpenAI API error → retry 1 lần, nếu fail → error message
  - Response time > 10s → hiển thị loading indicator

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎭 USE CASE 3: Sinh viên xem tiến độ dự án
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ACTOR: Student

MAIN FLOW:
  1. Sinh viên login và vào dashboard
  2. Xem overview card:
     - % hoàn thành tổng thể
     - Tasks còn lại
     - Upcoming deadlines
  3. Click vào project để xem chi tiết:
     - Timeline tasks (Gantt-like view)
     - List documents đã upload
     - Recent notifications
  4. Có thể update status của task được assign
  5. View comments/feedback từ giảng viên

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎭 USE CASE 4: Admin tạo project mới
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ACTOR: Admin

MAIN FLOW:
  1. Admin login → vào "Manage Projects"
  2. Click "Create New Project"
  3. Điền form:
     - Project title
     - Description
     - Select student (dropdown)
     - Select lecturer (dropdown)
     - Start date, Expected end date
  4. Submit
  5. Hệ thống tạo project + tạo notifications cho student & lecturer

══════════════════════════════════════════════════════════════════════════════
VI. QUY TRÌNH XÂY DỰNG (12 TUẦN)
══════════════════════════════════════════════════════════════════════════════

📅 TIMELINE CHI TIẾT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────┬──────────────────────────────────┬──────────────────────────────┐
│  TUẦN   │           CÔNG VIỆC              │         DELIVERABLES         │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ PHASE 1: SETUP & CORE FEATURES (Tuần 1-5)                                 │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 1  │ Setup & Database Design          │                              │
│         │ - Init Git repo                  │ ✅ Repo structure            │
│         │ - Setup Node + React projects    │ ✅ Docker Compose config     │
│         │ - Design & implement DB schema   │ ✅ Prisma schema + migration │
│         │ - Docker Compose (Postgres)      │ ✅ Seed data script          │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 2  │ Backend Core API                 │                              │
│         │ - Auth system (register/login)   │ ✅ JWT authentication        │
│         │ - User CRUD                      │ ✅ 10+ API endpoints         │
│         │ - Project CRUD                   │ ✅ Postman collection        │
│         │ - Task CRUD                      │ ✅ API documentation         │
│         │ - Middleware (auth, validation)  │                              │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 3  │ Document Upload & Management     │                              │
│         │ - Multer setup                   │ ✅ Upload API                │
│         │ - Cloudinary integration         │ ✅ File validation           │
│         │ - Document CRUD APIs             │ ✅ Document listing          │
│         │ - Notification system (basic)    │ ✅ Notification APIs         │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 4-5│ Frontend Core UI                 │                              │
│         │ - Setup React + Routing          │ ✅ Login/Register pages      │
│         │ - Auth pages (login/register)    │ ✅ Dashboard                 │
│         │ - Dashboard layouts              │ ✅ Project management UI     │
│         │ - Project management pages       │ ✅ Task management UI        │
│         │ - Task management UI             │ ✅ Document upload UI        │
│         │ - Document upload interface      │ ✅ Responsive design         │
│         │ - React Query setup              │                              │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ PHASE 2: AI INTEGRATION (Tuần 6-9)                                        │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 6  │ Python AI Service Setup          │                              │
│         │ - Init FastAPI project           │ ✅ FastAPI server running    │
│         │ - Setup ChromaDB                 │ ✅ ChromaDB connection       │
│         │ - OpenAI API integration         │ ✅ Health check endpoints    │
│         │ - PDF extraction (PyPDF2)        │ ✅ PDF text extraction       │
│         │ - Text chunking (LangChain)      │                              │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 7  │ RAG Ingestion Pipeline           │                              │
│         │ - POST /ai/ingest endpoint       │ ✅ Ingest API working        │
│         │ - Document processing workflow   │ ✅ Embeddings in ChromaDB    │
│         │ - Embedding generation           │ ✅ Error handling            │
│         │ - Store vectors in ChromaDB      │ ✅ Status update callback    │
│         │ - Update index status in DB      │                              │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 8  │ RAG Query Pipeline               │                              │
│         │ - POST /ai/query endpoint        │ ✅ Query API working         │
│         │ - Similarity search in ChromaDB  │ ✅ Context retrieval         │
│         │ - Prompt engineering             │ ✅ LLM response generation   │
│         │ - LLM integration (OpenAI)       │ ✅ Source citation           │
│         │ - Response formatting + sources  │                              │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 9  │ Frontend AI Interface            │                              │
│         │ - AI Chat component              │ ✅ Chat UI                   │
│         │ - Query input & response display │ ✅ Source display            │
│         │ - Source citation UI             │ ✅ Feedback buttons          │
│         │ - Feedback mechanism (👍/👎)     │ ✅ Loading states            │
│         │ - Node ↔ Python connection       │                              │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ PHASE 3: TESTING & DEPLOYMENT (Tuần 10-12)                                │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 10 │ Testing & Bug Fixes              │                              │
│         │ - Write unit tests (Jest/Pytest) │ ✅ Test coverage > 60%       │
│         │ - Integration testing            │ ✅ Test report               │
│         │ - Bug fixes                      │ ✅ Known issues list         │
│         │ - Performance optimization       │                              │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 11 │ Deployment & Documentation       │                              │
│         │ - Deploy backend (Render)        │ ✅ Live backend URL          │
│         │ - Deploy frontend (Vercel)       │ ✅ Live frontend URL         │
│         │ - Setup production DB (Neon)     │ ✅ Production DB             │
│         │ - Environment configs            │ ✅ User guide                │
│         │ - Write user documentation       │ ✅ Technical docs            │
├─────────┼──────────────────────────────────┼──────────────────────────────┤
│ Week 12 │ Final Polish & Presentation      │                              │
│         │ - UI/UX improvements             │ ✅ Demo video                │
│         │ - Prepare demo data              │ ✅ Presentation slides       │
│         │ - Record demo video              │ ✅ Final report              │
│         │ - Prepare presentation           │ ✅ Source code + docs        │
│         │ - Final testing                  │                              │
└─────────┴──────────────────────────────────┴──────────────────────────────┘

⚠️ RISK BUFFER:
  - Mỗi phase dành 1-2 ngày buffer cho unplanned issues
  - Nếu AI integration khó → có thể giảm scope (chỉ Q&A basic)
  - Frontend có thể dùng template để tiết kiệm thời gian

══════════════════════════════════════════════════════════════════════════════
VII. RAG PIPELINE CHI TIẾT
══════════════════════════════════════════════════════════════════════════════

🔄 INGESTION FLOW (Document Processing)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────┐
│   UPLOAD    │  Student uploads PDF via React
└──────┬──────┘
       │
       ▼
┌─────────────────────────────────────────────────────────────────────────┐
│  NODE.JS BACKEND                                                        │
│                                                                         │
│  1. Receive file via Multer                                            │
│  2. Validate: extension (.pdf/.docx), size (< 10MB)                    │
│  3. Upload to Cloudinary → get public URL                              │
│  4. Save to DB: Document { status: PENDING, fileUrl: "..." }           │
│  5. HTTP POST to Python: /ai/ingest                                    │
│     Body: { document_id, project_id, file_url }                        │
│  6. Return success to frontend                                         │
└──────────────────────────────┬──────────────────────────────────────────┘
                               │
                               ▼
┌─────────────────────────────────────────────────────────────────────────┐
│  PYTHON AI SERVICE (FastAPI)                                           │
│                                                                         │
│  1. Receive request at POST /ai/ingest                                 │
│  2. Download file from file_url                                        │
│  3. Extract text:                                                      │
│     - PDF: PyPDF2 hoặc pdfplumber                                      │
│     - DOCX: python-docx                                                │
│  4. Text Chunking (LangChain):                                         │
│     splitter = RecursiveCharacterTextSplitter(                         │
│         chunk_size=512,                                                │
│         chunk_overlap=50,                                              │
│         separators=["\n\n", "\n", ". ", " "]                           │
│     )                                                                  │
│     chunks = splitter.split_text(full_text)                            │
│                                                                         │
│  5. Generate Embeddings:                                               │
│     for each chunk:                                                    │
│         embedding = openai.Embedding.create(                           │
│             model="text-embedding-3-small",                            │
│             input=chunk                                                │
│         )                                                              │
│                                                                         │
│  6. Store in ChromaDB:                                                 │
│     collection.add(                                                    │
│         ids=[f"{doc_id}_chunk_{i}"],                                   │
│         documents=[chunk],                                             │
│         embeddings=[embedding],                                        │
│         metadatas=[{                                                   │
│             "document_id": doc_id,                                     │
│             "project_id": project_id,                                  │
│             "chunk_index": i,                                          │
│             "source": filename                                         │
│         }]                                                             │
│     )                                                                  │
│                                                                         │
│  7. Callback to Node:                                                  │
│     PUT /api/documents/{doc_id}/index-status                           │
│     Body: { status: "INDEXED", chunk_count: len(chunks) }              │
│                                                                         │
│  8. Return success response                                            │
└─────────────────────────────────────────────────────────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔍 QUERY FLOW (Question Answering)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────┐
│   USER      │  Lecturer asks: "Phương pháp nghiên cứu là gì?"
└──────┬──────┘
       │
       ▼
┌─────────────────────────────────────────────────────────────────────────┐
│  REACT FRONTEND                                                         │
│                                                                         │
│  1. User types question in chat input                                  │
│  2. POST /api/ai/query                                                 │
│     Headers: { Authorization: "Bearer <JWT>" }                         │
│     Body: { project_id, question, top_k: 5 }                           │
│  3. Show loading indicator                                             │
└──────────────────────────────┬──────────────────────────────────────────┘
                               │
                               ▼
┌─────────────────────────────────────────────────────────────────────────┐
│  NODE.JS BACKEND                                                        │
│                                                                         │
│  1. Verify JWT token                                                   │
│  2. Check user has access to project_id                                │
│  3. Forward to Python:                                                 │
│     POST http://python-service:8000/ai/query                           │
│     Body: { project_id, question, top_k }                              │
│  4. Wait for response (timeout: 30s)                                   │
│  5. Save to ai_queries table                                           │
│  6. Return response to frontend                                        │
└──────────────────────────────┬──────────────────────────────────────────┘
                               │
                               ▼
┌─────────────────────────────────────────────────────────────────────────┐
│  PYTHON AI SERVICE                                                      │
│                                                                         │
│  1. Receive POST /ai/query                                             │
│                                                                         │
│  2. RETRIEVAL:                                                         │
│     query_embedding = openai.Embedding.create(                         │
│         model="text-embedding-3-small",                                │
│         input=question                                                 │
│     )                                                                  │
│                                                                         │
│     results = collection.query(                                        │
│         query_embeddings=[query_embedding],                            │
│         n_results=top_k,                                               │
│         where={"project_id": project_id}  # Filter by project          │
│     )                                                                  │
│                                                                         │
│  3. BUILD CONTEXT:                                                     │
│     context = ""                                                       │
│     for i, (doc, meta) in enumerate(zip(results['documents'],         │
│                                          results['metadatas'])):       │
│         context += f"[{i+1}] {doc}\n\n"                                │
│                                                                         │
│  4. PROMPT ENGINEERING:                                                │
│     prompt = f"""                                                      │
│     Bạn là trợ lý AI hỗ trợ giảng viên đánh giá báo cáo nghiên cứu.   │
│                                                                         │
│     NGỮ CẢNH (từ báo cáo của sinh viên):                               │
│     {context}                                                          │
│                                                                         │
│     CÂU HỎI: {question}                                                │
│                                                                         │
│     YÊU CẦU:                                                           │
│     - Trả lời bằng tiếng Việt, dựa 100% vào ngữ cảnh trên             │
│     - Trích dẫn nguồn bằng số [1], [2],...                             │
│     - Nếu không đủ thông tin, nói rõ "Không tìm thấy thông tin"       │
│     - Trả lời ngắn gọn, súc tích (2-3 đoạn)                            │
│     """                                                                │
│                                                                         │
│  5. GENERATION (Call LLM):                                             │
│     response = openai.ChatCompletion.create(                           │
│         model="gpt-4o-mini",                                           │
│         messages=[                                                     │
│             {"role": "system", "content": "Bạn là trợ lý AI..."},      │
│             {"role": "user", "content": prompt}                        │
│         ],                                                             │
│         temperature=0.3,  # Low temp for factual answers               │
│         max_tokens=500                                                 │
│     )                                                                  │
│     answer = response.choices[0].message.content                       │
│                                                                         │
│  6. FORMAT SOURCES:                                                    │
│     sources = [                                                        │
│         {                                                              │
│             "document_id": meta["document_id"],                        │
│             "source": meta["source"],                                  │
│             "chunk_index": meta["chunk_index"],                        │
│             "relevance_score": results['distances'][i]                 │
│         }                                                              │
│         for i, meta in enumerate(results['metadatas'])                 │
│     ]                                                                  │
│                                                                         │
│  7. Return JSON:                                                       │
│     {                                                                  │
│         "answer": answer,                                              │
│         "sources": sources,                                            │
│         "response_time_ms": elapsed_time                               │
│     }                                                                  │
└──────────────────────────────┬──────────────────────────────────────────┘
                               │
                               ▼
┌─────────────────────────────────────────────────────────────────────────┐
│  REACT FRONTEND                                                         │
│                                                                         │
│  1. Receive response                                                   │
│  2. Display answer in chat bubble                                      │
│  3. Show sources list:                                                 │
│     📄 report_final.pdf - Chunk 3 (Relevance: 0.89)                    │
│     📄 report_final.pdf - Chunk 7 (Relevance: 0.82)                    │
│  4. Show feedback buttons:                                             │
│     [👍 Helpful]  [👎 Not Helpful]                                     │
│  5. Allow click on source → navigate to document viewer                │
└─────────────────────────────────────────────────────────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 PROMPT OPTIMIZATION TIPS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. System Prompt (cố định):
"""
Bạn là trợ lý AI chuyên hỗ trợ giảng viên hướng dẫn khoa học.
Nhiệm vụ của bạn là trả lời câu hỏi dựa CHÍNH XÁC vào nội dung 
báo cáo nghiên cứu của sinh viên.

Nguyên tắc:
- KHÔNG bịa đặt thông tin không có trong ngữ cảnh
- LUÔN trích dẫn nguồn bằng [số]
- Nếu không đủ thông tin, thừa nhận một cách rõ ràng
- Trả lời bằng tiếng Việt, chuyên nghiệp
"""

2. Few-shot Examples (optional):
Thêm 1-2 ví dụ Q&A mẫu vào prompt để model hiểu format mong muốn

3. Temperature Settings:
- Factual Q&A: temperature=0.2-0.3
- Creative suggestions: temperature=0.5-0.7

4. Chunking Best Practices:
- Chunk size: 512 tokens (~ 350-400 words)
- Overlap: 50 tokens (để không mất context)
- Separator priority: "\n\n" > "\n" > ". " > " "

══════════════════════════════════════════════════════════════════════════════
VIII. TESTING & EVALUATION
══════════════════════════════════════════════════════════════════════════════

🧪 TESTING STRATEGY
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. UNIT TESTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Backend (Node.js - Jest):
  ✅ Auth: register, login, JWT validation
  ✅ User CRUD: create, read, update, delete
  ✅ Project CRUD: access control checks
  ✅ Document upload: file validation, size limits
  ✅ API middleware: error handling, validation

AI Service (Python - Pytest):
  ✅ PDF text extraction
  ✅ Text chunking logic
  ✅ Embedding generation (mock OpenAI)
  ✅ ChromaDB operations (add, query)
  ✅ Prompt building logic

Target: > 60% code coverage

2. INTEGRATION TESTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✅ End-to-end upload flow (Frontend → Node → Python → DB)
  ✅ End-to-end query flow (Frontend → Node → Python → OpenAI)
  ✅ Authentication flow
  ✅ Project creation → task assignment → completion
  
Tools: Cypress (frontend) + Supertest (backend API)

3. MANUAL TESTING CHECKLIST
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

□ User Registration & Login
  □ Valid credentials → success
  □ Invalid email format → error
  □ Duplicate email → error
  □ Password requirements enforced

□ Project Management
  □ Create project as admin
  □ Student can view assigned projects
  □ Lecturer can view supervised projects
  □ Edit project details
  □ Delete project (cascade deletion check)

□ Document Upload
  □ Upload PDF (< 10MB) → success
  □ Upload oversized file → error
  □ Upload non-PDF → error
  □ View uploaded documents
  □ Index status updates correctly

□ AI Q&A
  □ Ask question → get relevant answer
  □ Ask unrelated question → "no info" response
  □ Source citations are correct
  □ Feedback buttons work
  □ Response time < 10s

□ UI/UX
  □ Responsive on mobile, tablet, desktop
  □ Loading states display properly
  □ Error messages are clear
  □ Navigation is intuitive

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 EVALUATION METRICS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. FUNCTIONAL METRICS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ Test Coverage: > 60%
✅ API Uptime: > 95%
✅ Critical bugs: 0
✅ Known minor bugs: < 5

2. AI PERFORMANCE METRICS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Chuẩn bị 20 câu hỏi test với ground truth answers:

| Metric                  | Target    | Measurement Method          |
|-------------------------|-----------|------------------------------|
| Answer Relevance        | > 80%     | Manual evaluation (5-point) |
| Source Accuracy         | > 90%     | Check if sources match       |
| Average Response Time   | < 5s      | Log from ai_queries table    |
| Hallucination Rate      | < 10%     | Manual review                |
| User Satisfaction       | > 75%     | Thumbs up/down ratio         |

Ví dụ test questions:
1. "Mục tiêu nghiên cứu của đề tài là gì?"
2. "Phương pháp thu thập dữ liệu được sử dụng?"
3. "Kết quả chính của nghiên cứu là gì?"
4. "Hạn chế của nghiên cứu được đề cập?"
5. "Đề xuất hướng nghiên cứu tiếp theo?"
...

3. PERFORMANCE METRICS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

| Endpoint                | Target Latency | Current | Status |
|-------------------------|----------------|---------|--------|
| POST /auth/login        | < 500ms        |         |        |
| GET /projects           | < 300ms        |         |        |
| POST /documents/upload  | < 2s           |         |        |
| POST /ai/ingest         | < 30s          |         |        |
| POST /ai/query          | < 8s           |         |        |

Tools: 
- k6 hoặc Artillery cho load testing
- Postman Monitor cho uptime monitoring

4. USER FEEDBACK
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Sau khi demo với 3-5 users (sinh viên + giảng viên):

□ UI dễ sử dụng? (1-5 stars)
□ Tính năng AI hữu ích? (1-5 stars)
□ Tốc độ phản hồi chấp nhận được? (Yes/No)
□ Đề xuất cải thiện? (open text)

══════════════════════════════════════════════════════════════════════════════
IX. DEPLOYMENT
══════════════════════════════════════════════════════════════════════════════

🚀 DEPLOYMENT STRATEGY
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📦 OPTION 1: FREE TIER (Khuyến nghị cho demo)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Component          │ Service       │ Free Tier Limits
───────────────────┼───────────────┼──────────────────────────────────────
Frontend           │ Vercel        │ Unlimited bandwidth, auto SSL
Backend (Node)     │ Render        │ 750 hours/month, sleeps after 15min
AI Service (Python)│ Render        │ 750 hours/month (separate instance)
PostgreSQL         │ Neon          │ 10 GB storage, 5 compute hours
ChromaDB           │ Docker on VPS │ (hoặc dùng Render persistent disk)
File Storage       │ Cloudinary    │ 25 GB, 25k transformations

💰 Estimated monthly cost: $0 (với free tiers)

⚠️ Limitations:
- Backend cold start (~30s nếu không dùng lâu)
- Neon DB có giới hạn 5 compute hours/month
- Cần optimize để giữ trong free tier

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📦 OPTION 2: LOW-COST VPS (Nếu cần always-on)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Provider: DigitalOcean / Vultr / Linode
Plan: $6/month (1 vCPU, 1GB RAM) + $4/month DB

Setup:
1. Deploy Docker Compose:
   - Frontend (serve via Nginx)
   - Backend Node
   - Python AI Service
   - PostgreSQL
   - ChromaDB

2. Nginx reverse proxy:
   - api.yourdomain.com → Node backend
   - ai.yourdomain.com → Python service
   - yourdomain.com → Frontend static files

3. SSL: Let's Encrypt (free)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🐳 DOCKER COMPOSE EXAMPLE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# docker-compose.yml

version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: research_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: research_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U research_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Backend
  backend:
    build: ./backend
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://research_user:${DB_PASSWORD}@postgres:5432/research_db
      JWT_SECRET: ${JWT_SECRET}
      PYTHON_AI_URL: http://ai-service:8000
      CLOUDINARY_URL: ${CLOUDINARY_URL}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Python AI Service
  ai-service:
    build: ./ai-service
    ports:
      - "8000:8000"
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CHROMA_PERSIST_DIR: /data/chroma
      DATABASE_URL: postgresql://research_user:${DB_PASSWORD}@postgres:5432/research_db
    depends_on:
      - postgres
    volumes:
      - chroma_data:/data/chroma
      - ./ai-service:/app

  # Frontend (for local dev only)
  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  chroma_data:

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📝 ENVIRONMENT VARIABLES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# .env.example

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/research_db

# Backend
NODE_ENV=production
PORT=3000
JWT_SECRET=your-super-secret-jwt-key-change-this
JWT_EXPIRES_IN=15m
REFRESH_TOKEN_EXPIRES_IN=7d

# Python AI Service
PYTHON_AI_URL=http://ai-service:8000
OPENAI_API_KEY=sk-...your-key...

# File Storage
CLOUDINARY_URL=cloudinary://api_key:api_secret@cloud_name

# ChromaDB
CHROMA_PERSIST_DIR=./data/chroma

# CORS
CORS_ORIGIN=https://yourdomain.com

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🚀 DEPLOYMENT STEPS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Prepare Production Build
   □ Set environment to production
   □ Update API URLs
   □ Build frontend: npm run build
   □ Test Docker Compose locally

2. Database Setup
   □ Create production database on Neon/Supabase
   □ Run Prisma migrations: npx prisma migrate deploy
   □ Seed initial data (admin user, sample projects)

3. Deploy Backend (Render)
   □ Connect GitHub repo
   □ Set environment variables
   □ Deploy from main branch
   □ Test health check endpoint

4. Deploy AI Service (Render)
   □ Create separate service
   □ Set OPENAI_API_KEY
   □ Deploy with persistent disk for ChromaDB
   □ Test /health endpoint

5. Deploy Frontend (Vercel)
   □ Import GitHub repo
   □ Set VITE_API_URL to backend URL
   □ Deploy
   □ Test production build

6. Post-Deployment
   □ Test end-to-end flows
   □ Monitor logs for errors
   □ Setup uptime monitoring (UptimeRobot)
   □ Create demo accounts

══════════════════════════════════════════════════════════════════════════════
X. RỦI RO & GIẢI PHÁP
══════════════════════════════════════════════════════════════════════════════

⚠️ RISK MANAGEMENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────┬──────┬────────────────────┬─────────────────────┐
│ RỦI RO                 │ MỨC  │ TÁC ĐỘNG           │ GIẢI PHÁP           │
├────────────────────────┼──────┼────────────────────┼─────────────────────┤
│ OpenAI API Cost        │ 🔴 Cao│ Vượt ngân sách    │ - Dùng free credits │
│                        │      │ demo               │ - Set usage limits  │
│                        │      │                    │ - Cache responses   │
│                        │      │                    │ - Fallback to local │
│                        │      │                    │   model nếu cần     │
├────────────────────────┼──────┼────────────────────┼─────────────────────┤
│ Timeline Delay         │ 🔴 Cao│ Không kịp deadline│ - Prioritize MVP    │
│                        │      │                    │ - Cut optional      │
│                        │      │                    │   features          │
│                        │      │                    │ - Weekly checkpoints│
├────────────────────────┼──────┼────────────────────┼─────────────────────┤
│ Python-Node            │ 🟡 TB │ Integration issues│ - Define API        │
│ Integration Issues     │      │                    │   contract early    │
│                        │      │                    │ - Mock endpoints    │
│                        │      │                    │ - Unit test both    │
├────────────────────────┼──────┼────────────────────┼─────────────────────┤
│ ChromaDB Scaling       │ 🟡 TB │ Slow queries với  │ - Limit demo to     │
│                        │      │ nhiều docs         │   10-20 documents   │
│                        │      │                    │ - Index optimization│
├────────────────────────┼──────┼────────────────────┼─────────────────────┤
│ Poor AI Answer Quality │ 🟡 TB │ User dissatisfied │ - Prompt engineering│
│                        │      │                    │ - Few-shot examples │
│                        │      │                    │ - Lower temperature │
├────────────────────────┼──────┼────────────────────┼─────────────────────┤
│ Frontend Complexity    │ 🟢 Thấp│ UI không đẹp      │ - Dùng Shadcn/ui    │
│                        │      │                    │ - Follow templates  │
│                        │      │                    │ - Focus on function │
├────────────────────────┼──────┼────────────────────┼─────────────────────┤
│ Deployment Issues      │ 🟢 Thấp│ Không deploy được│ - Test Docker local │
│                        │      │                    │ - Use managed       │
│                        │      │                    │   services (Render) │
│                        │      │                    │ - Documentation     │
└────────────────────────┴──────┴────────────────────┴─────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💰 COST MANAGEMENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

OpenAI API Usage Estimate:

Assumptions:
- 20 documents × 10 pages = 200 pages
- ~500 tokens/page → 100,000 tokens total
- Embedding: $0.02 per 1M tokens → $0.002
- 100 queries during demo
- Query avg 1,000 tokens context + 300 tokens output
- GPT-4o-mini: $0.15/1M input, $0.60/1M output
- Total: ~$0.05 for demo

✅ Easily fits within $5-18 free credit

Strategies to minimize cost:
1. Use text-embedding-3-small (cheapest embedding)
2. Use GPT-4o-mini instead of GPT-4
3. Cache common queries in Redis
4. Limit max_tokens in responses
5. Set monthly budget alert in OpenAI dashboard

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📋 CONTINGENCY PLANS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

IF Python AI Service không kịp hoàn thành:
→ Dùng mock data với answers được hard-code
→ Vẫn demo được core features (CRUD, upload)

IF OpenAI API quá đắt:
→ Chuyển sang local model: sentence-transformers + Llama 3 (via Ollama)
→ Chất lượng có thể giảm nhưng vẫn demo được concept

IF Deployment gặp vấn đề:
→ Demo trên localhost với Docker Compose
→ Record video demo để submit

IF ChromaDB không stable:
→ Fallback sang FAISS (không persist, chỉ in-memory)
→ Re-index mỗi lần restart

══════════════════════════════════════════════════════════════════════════════
XI. APPENDIX - USEFUL COMMANDS & RESOURCES
══════════════════════════════════════════════════════════════════════════════

🛠️ DEVELOPMENT COMMANDS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Database
npx prisma migrate dev --name init
npx prisma generate
npx prisma studio
npx prisma db seed

# Backend
npm run dev          # Development server
npm run build        # Production build
npm run test         # Run tests
npm run lint         # Lint code

# Frontend
npm run dev          # Vite dev server
npm run build        # Production build
npm run preview      # Preview production build

# Docker
docker-compose up -d                    # Start all services
docker-compose logs -f backend          # View logs
docker-compose exec postgres psql -U research_user  # DB shell
docker-compose down -v                  # Stop & remove volumes

# Python
pip install -r requirements.txt
uvicorn main:app --reload
pytest tests/ -v

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 LEARNING RESOURCES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

RAG & LangChain:
- https://python.langchain.com/docs/tutorials/rag/
- https://docs.trychroma.com/

Prisma:
- https://www.prisma.io/docs/getting-started

React Query:
- https://tanstack.com/query/latest/docs/framework/react/overview

FastAPI:
- https://fastapi.tiangolo.com/tutorial/

Deployment:
- Render: https://render.com/docs
- Vercel: https://vercel.com/docs
- Neon: https://neon.tech/docs/introduction

══════════════════════════════════════════════════════════════════════════════

✅ CHECKLIST TRƯỚC KHI BẮT ĐẦU
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

□ Đã đọc và hiểu toàn bộ quy trình
□ Đã setup môi trường dev (Node, Python, Docker)
□ Đã có OpenAI API key (hoặc plan B)
□ Đã có Cloudinary account
□ Đã tạo GitHub repo
□ Đã setup project management tool (Trello/Notion)
□ Đã có timeline cụ thể (Gantt chart)
□ Đã chuẩn bị demo data

══════════════════════════════════════════════════════════════════════════════

🎯 KẾT LUẬN
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Đồ án này có 3 thành phần chính:

1. ⚙️ CORE WEB APP (40% công sức)
   - Auth, CRUD, basic features
   - Phần này KHÔNG CẦN AI vẫn chạy được

2. 🤖 AI INTEGRATION (40% công sức)
   - RAG pipeline
   - Đây là phần highlight, tính mới

3. 🎨 UI/UX + TESTING (20% công sức)
   - Giao diện đẹp
   - Testing, deployment

CHIẾN LƯỢC:
→ Tuần 1-5: Làm CORE cho XONG, chạy được end-to-end
→ Tuần 6-9: Tích hợp AI (có thể fail nhưng vẫn có backup)
→ Tuần 10-12: Polish + document + presentation

Với scope này, bạn có thể:
✅ Hoàn thành trong 12 tuần
✅ Demo được hệ thống hoàn chỉnh
✅ Có tính năng AI nổi bật
✅ Deploy được lên production
✅ Đạt điểm tốt (8.5-9/10)

GOOD LUCK! 🚀

══════════════════════════════════════════════════════════════════════════════
END OF DOCUMENT
══════════════════════════════════════════════════════════════════════════════

