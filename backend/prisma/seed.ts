import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting seed...');

  // Clean existing data (optional - careful in production!)
  await prisma.notification.deleteMany();
  await prisma.aIQuery.deleteMany();
  await prisma.documentChunk.deleteMany();
  await prisma.document.deleteMany();
  await prisma.task.deleteMany();
  await prisma.projectStudent.deleteMany();
  await prisma.project.deleteMany();
  await prisma.user.deleteMany();

  // Create Admin
  const admin = await prisma.user.create({
    data: {
      email: 'admin@research.edu',
      passwordHash: await bcrypt.hash('admin123', 10),
      fullName: 'System Administrator',
      role: 'ADMIN',
    },
  });
  console.log('‚úÖ Created admin user');

  // Create Lecturers
  const lecturer1 = await prisma.user.create({
    data: {
      email: 'lecturer1@research.edu',
      passwordHash: await bcrypt.hash('lecturer123', 10),
      fullName: 'Dr. Nguy·ªÖn VƒÉn A',
      role: 'LECTURER',
    },
  });

  const lecturer2 = await prisma.user.create({
    data: {
      email: 'lecturer2@research.edu',
      passwordHash: await bcrypt.hash('lecturer123', 10),
      fullName: 'Dr. Tr·∫ßn Th·ªã B',
      role: 'LECTURER',
    },
  });
  console.log('‚úÖ Created 2 lecturers');

  // Create Students
  const student1 = await prisma.user.create({
    data: {
      email: 'student1@research.edu',
      passwordHash: await bcrypt.hash('student123', 10),
      fullName: 'L√™ VƒÉn C',
      role: 'STUDENT',
      studentId: 'SV001',
    },
  });

  const student2 = await prisma.user.create({
    data: {
      email: 'student2@research.edu',
      passwordHash: await bcrypt.hash('student123', 10),
      fullName: 'Ph·∫°m Th·ªã D',
      role: 'STUDENT',
      studentId: 'SV002',
    },
  });

  const student3 = await prisma.user.create({
    data: {
      email: 'student3@research.edu',
      passwordHash: await bcrypt.hash('student123', 10),
      fullName: 'Ho√†ng VƒÉn E',
      role: 'STUDENT',
      studentId: 'SV003',
    },
  });

  const student4 = await prisma.user.create({
    data: {
      email: 'student4@research.edu',
      passwordHash: await bcrypt.hash('student123', 10),
      fullName: 'V≈© Th·ªã F',
      role: 'STUDENT',
      studentId: 'SV004',
    },
  });

  const student5 = await prisma.user.create({
    data: {
      email: 'student5@research.edu',
      passwordHash: await bcrypt.hash('student123', 10),
      fullName: 'ƒê·∫∑ng VƒÉn G',
      role: 'STUDENT',
      studentId: 'SV005',
    },
  });
  console.log('‚úÖ Created 5 students');

  // Create Projects
  const project1 = await prisma.project.create({
    data: {
      title: 'Nghi√™n c·ª©u ·ª©ng d·ª•ng AI trong gi√°o d·ª•c',
      description: 'ƒê·ªÅ t√†i nghi√™n c·ª©u v·ªÅ vi·ªác √°p d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o v√†o qu·∫£n l√Ω v√† h·ªó tr·ª£ gi·∫£ng d·∫°y trong c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc.',
      lecturerId: lecturer1.id,
      startDate: new Date('2024-09-01'),
      endDate: new Date('2025-06-30'),
      status: 'IN_PROGRESS',
      progress: 45,
    },
  });

  const project2 = await prisma.project.create({
    data: {
      title: 'Ph√°t tri·ªÉn h·ªá th·ªëng IoT cho nh√† th√¥ng minh',
      description: 'X√¢y d·ª±ng h·ªá th·ªëng qu·∫£n l√Ω v√† ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã th√¥ng minh trong gia ƒë√¨nh s·ª≠ d·ª•ng c√¥ng ngh·ªá IoT.',
      lecturerId: lecturer1.id,
      startDate: new Date('2024-10-01'),
      endDate: new Date('2025-07-31'),
      status: 'IN_PROGRESS',
      progress: 30,
    },
  });

  const project3 = await prisma.project.create({
    data: {
      title: 'Ph√¢n t√≠ch d·ªØ li·ªáu l·ªõn v·ªõi Machine Learning',
      description: 'Nghi√™n c·ª©u v√† ·ª©ng d·ª•ng c√°c thu·∫≠t to√°n machine learning ƒë·ªÉ ph√¢n t√≠ch v√† d·ª± ƒëo√°n xu h∆∞·ªõng t·ª´ d·ªØ li·ªáu l·ªõn.',
      lecturerId: lecturer2.id,
      startDate: new Date('2024-08-15'),
      endDate: new Date('2025-05-30'),
      status: 'IN_PROGRESS',
      progress: 60,
    },
  });

  // Add students to projects
  await prisma.projectStudent.createMany({
    data: [
      // Project 1 - AI in Education (3 students - team project)
      {
        projectId: project1.id,
        studentId: student1.id,
        role: 'LEAD',
      },
      {
        projectId: project1.id,
        studentId: student2.id,
        role: 'MEMBER',
      },
      {
        projectId: project1.id,
        studentId: student4.id,
        role: 'MEMBER',
      },
      // Project 2 - IoT Smart Home (2 students)
      {
        projectId: project2.id,
        studentId: student2.id,
        role: 'LEAD',
      },
      {
        projectId: project2.id,
        studentId: student5.id,
        role: 'MEMBER',
      },
      // Project 3 - Big Data ML (single student)
      {
        projectId: project3.id,
        studentId: student3.id,
        role: 'LEAD',
      },
    ],
  });

  console.log('‚úÖ Created 3 projects with student assignments');

  // Create Tasks for Project 1
  await prisma.task.createMany({
    data: [
      {
        projectId: project1.id,
        title: 'Nghi√™n c·ª©u t√†i li·ªáu tham kh·∫£o',
        description: 'T√¨m hi·ªÉu c√°c nghi√™n c·ª©u li√™n quan v·ªÅ AI trong gi√°o d·ª•c',
        assigneeId: student1.id,
        status: 'COMPLETED',
        priority: 'HIGH',
        completedAt: new Date('2024-10-15'),
      },
      {
        projectId: project1.id,
        title: 'Thi·∫øt k·∫ø h·ªá th·ªëng',
        description: 'Thi·∫øt k·∫ø ki·∫øn tr√∫c t·ªïng th·ªÉ c·ªßa h·ªá th·ªëng',
        assigneeId: student1.id,
        status: 'COMPLETED',
        priority: 'HIGH',
        completedAt: new Date('2024-11-20'),
      },
      {
        projectId: project1.id,
        title: 'X√¢y d·ª±ng prototype',
        description: 'Ph√°t tri·ªÉn phi√™n b·∫£n demo ƒë·∫ßu ti√™n',
        assigneeId: student1.id,
        status: 'IN_PROGRESS',
        priority: 'MEDIUM',
        dueDate: new Date('2025-02-28'),
      },
      {
        projectId: project1.id,
        title: 'Testing v√† ƒë√°nh gi√°',
        description: 'Ki·ªÉm th·ª≠ h·ªá th·ªëng v√† thu th·∫≠p ph·∫£n h·ªìi',
        assigneeId: student1.id,
        status: 'TODO',
        priority: 'MEDIUM',
        dueDate: new Date('2025-04-30'),
      },
      {
        projectId: project1.id,
        title: 'Ho√†n thi·ªán b√°o c√°o',
        description: 'Vi·∫øt b√°o c√°o t·ªët nghi·ªáp ho√†n ch·ªânh',
        assigneeId: student1.id,
        status: 'TODO',
        priority: 'HIGH',
        dueDate: new Date('2025-06-15'),
      },
    ],
  });

  // Create Tasks for Project 2
  await prisma.task.createMany({
    data: [
      {
        projectId: project2.id,
        title: 'Kh·∫£o s√°t y√™u c·∫ßu ng∆∞·ªùi d√πng',
        description: 'Thu th·∫≠p v√† ph√¢n t√≠ch nhu c·∫ßu c·ªßa ng∆∞·ªùi d√πng',
        assigneeId: student2.id,
        status: 'COMPLETED',
        priority: 'HIGH',
        completedAt: new Date('2024-11-10'),
      },
      {
        projectId: project2.id,
        title: 'Thi·∫øt k·∫ø ph·∫ßn c·ª©ng',
        description: 'L·ª±a ch·ªçn v√† thi·∫øt k·∫ø c√°c module IoT',
        assigneeId: student2.id,
        status: 'IN_PROGRESS',
        priority: 'HIGH',
        dueDate: new Date('2025-01-31'),
      },
      {
        projectId: project2.id,
        title: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng mobile',
        description: 'X√¢y d·ª±ng app ƒëi·ªÅu khi·ªÉn tr√™n ƒëi·ªán tho·∫°i',
        assigneeId: student5.id,
        status: 'TODO',
        priority: 'MEDIUM',
        dueDate: new Date('2025-04-30'),
      },
      {
        projectId: project2.id,
        title: 'T√≠ch h·ª£p h·ªá th·ªëng',
        description: 'K·∫øt n·ªëi c√°c module IoT v·ªõi ·ª©ng d·ª•ng',
        assigneeId: student5.id,
        status: 'TODO',
        priority: 'HIGH',
        dueDate: new Date('2025-05-15'),
      },
    ],
  });

  // Create Tasks for Project 3
  await prisma.task.createMany({
    data: [
      {
        projectId: project3.id,
        title: 'Thu th·∫≠p d·ªØ li·ªáu',
        description: 'T√¨m ki·∫øm v√† thu th·∫≠p c√°c dataset ph√π h·ª£p',
        assigneeId: student3.id,
        status: 'COMPLETED',
        priority: 'HIGH',
        completedAt: new Date('2024-09-30'),
      },
      {
        projectId: project3.id,
        title: 'Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu',
        description: 'L√†m s·∫°ch v√† chu·∫©n h√≥a d·ªØ li·ªáu',
        assigneeId: student3.id,
        status: 'IN_PROGRESS',
        priority: 'HIGH',
        dueDate: new Date('2025-01-15'),
      },
      {
        projectId: project3.id,
        title: 'X√¢y d·ª±ng model ML',
        description: 'Ph√°t tri·ªÉn v√† hu·∫•n luy·ªán c√°c m√¥ h√¨nh machine learning',
        assigneeId: student3.id,
        status: 'TODO',
        priority: 'HIGH',
        dueDate: new Date('2025-03-30'),
      },
      {
        projectId: project3.id,
        title: 'ƒê√°nh gi√° v√† t·ªëi ∆∞u',
        description: 'ƒê√°nh gi√° hi·ªáu su·∫•t v√† t·ªëi ∆∞u h√≥a model',
        assigneeId: student3.id,
        status: 'TODO',
        priority: 'MEDIUM',
        dueDate: new Date('2025-05-15'),
      },
    ],
  });

  console.log('‚úÖ Created tasks for all projects');

  // Create sample documents
  console.log('\nüìÑ Creating sample documents...');
  
  const documents = await prisma.document.createMany({
    data: [
      {
        projectId: project1.id,
        fileName: 'CV.docx',
        fileUrl: 'https://res.cloudinary.com/demo/image/upload/v1234567890/sample_cv.docx',
        fileSize: 65123,
        mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        uploadedBy: student1.id,
        description: 'CVVVVVVVVVV',
        status: 'PENDING',
      },
      {
        projectId: project1.id,
        fileName: 'CV.pdf',
        fileUrl: 'https://res.cloudinary.com/demo/image/upload/v1234567890/sample_cv.pdf',
        fileSize: 214123,
        mimeType: 'application/pdf',
        uploadedBy: student1.id,
        description: 'AAA',
        status: 'APPROVED',
      },
      {
        projectId: project1.id,
        fileName: 'quy_trinh_core_noneAl.txt',
        fileUrl: 'https://res.cloudinary.com/demo/image/upload/v1234567890/workflow.txt',
        fileSize: 4496,
        mimeType: 'text/plain',
        uploadedBy: lecturer1.id,
        description: 'Workflow Al',
        status: 'PENDING',
      },
      {
        projectId: project2.id,
        fileName: 'IoT_Design.pdf',
        fileUrl: 'https://res.cloudinary.com/demo/image/upload/v1234567890/iot_design.pdf',
        fileSize: 1024000,
        mimeType: 'application/pdf',
        uploadedBy: student2.id,
        description: 'IoT System Design Document',
        status: 'REJECTED',
      },
    ],
  });

  console.log('‚úÖ Created sample documents');

  // Create Notifications
  await prisma.notification.createMany({
    data: [
      // Project 1 notifications
      {
        userId: student1.id,
        projectId: project1.id,
        type: 'DEADLINE_APPROACHING',
        title: 'Deadline s·∫Øp ƒë·∫øn',
        message: 'Task "X√¢y d·ª±ng prototype" s·∫Ω ƒë·∫øn h·∫°n v√†o ng√†y 28/02/2025',
        isRead: false,
      },
      {
        userId: student2.id,
        projectId: project1.id,
        type: 'COMMENT_ADDED',
        title: 'Gi·∫£ng vi√™n ƒë√£ nh·∫≠n x√©t',
        message: 'Dr. Nguy·ªÖn VƒÉn A ƒë√£ th√™m nh·∫≠n x√©t v·ªÅ b√°o c√°o ti·∫øn ƒë·ªô c·ªßa team',
        isRead: false,
      },
      {
        userId: lecturer1.id,
        projectId: project1.id,
        type: 'TASK_COMPLETED',
        title: 'Sinh vi√™n ho√†n th√†nh task',
        message: 'L√™ VƒÉn C ƒë√£ ho√†n th√†nh task "Thi·∫øt k·∫ø h·ªá th·ªëng"',
        isRead: true,
      },
      // Project 2 notifications
      {
        userId: student2.id,
        projectId: project2.id,
        type: 'DEADLINE_APPROACHING',
        title: 'Deadline s·∫Øp ƒë·∫øn',
        message: 'Task "Thi·∫øt k·∫ø ph·∫ßn c·ª©ng" s·∫Ω ƒë·∫øn h·∫°n v√†o ng√†y 31/01/2025',
        isRead: false,
      },
      {
        userId: student5.id,
        projectId: project2.id,
        type: 'TASK_ASSIGNED',
        title: 'Task m·ªõi ƒë∆∞·ª£c giao',
        message: 'B·∫°n ƒë√£ ƒë∆∞·ª£c giao task "Ph√°t tri·ªÉn ·ª©ng d·ª•ng mobile"',
        isRead: false,
      },
      // Project 3 notifications
      {
        userId: student3.id,
        projectId: project3.id,
        type: 'TASK_COMPLETED',
        title: 'Ho√†n th√†nh task',
        message: 'B·∫°n ƒë√£ ho√†n th√†nh task "Thu th·∫≠p d·ªØ li·ªáu"',
        isRead: true,
      },
      {
        userId: lecturer2.id,
        projectId: project3.id,
        type: 'PROJECT_STATUS_CHANGED',
        title: 'C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô',
        message: 'Ho√†ng VƒÉn E ƒë√£ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô project l√™n 60%',
        isRead: false,
      },
    ],
  });

  console.log('‚úÖ Created notifications');

  console.log('\nüéâ Seed completed successfully!');
  console.log('\nüìã Demo accounts:');
  console.log('Admin:     admin@research.edu / admin123');
  console.log('Lecturer:  lecturer1@research.edu / lecturer123');
  console.log('Lecturer:  lecturer2@research.edu / lecturer123');
  console.log('Student:   student1@research.edu / student123 (Lead of Project 1)');
  console.log('Student:   student2@research.edu / student123 (Member of Project 1, Lead of Project 2)');
  console.log('Student:   student3@research.edu / student123 (Lead of Project 3)');
  console.log('Student:   student4@research.edu / student123 (Member of Project 1)');
  console.log('Student:   student5@research.edu / student123 (Member of Project 2)');
  console.log('\nüìä Project assignments:');
  console.log('Project 1: AI in Education - 3 students (student1 LEAD, student2+4 MEMBERS)');
  console.log('Project 2: IoT Smart Home - 2 students (student2 LEAD, student5 MEMBER)');
  console.log('Project 3: Big Data ML - 1 student (student3 LEAD)');
}

main()
  .catch((e) => {
    console.error('‚ùå Seed error:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

