generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USERS & AUTHENTICATION
// ============================================================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  fullName      String    @map("full_name")
  role          Role      @default(STUDENT)
  studentId     String?   @unique @map("student_id")
  avatarUrl     String?   @map("avatar_url")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  projectsAsLecturer  Project[] @relation("LecturerProjects")
  projectStudents     ProjectStudent[]
  tasks               Task[]
  notifications       Notification[]
  aiQueries           AIQuery[]
  comments            Comment[]
  taskAttachments     TaskAttachment[]
  documents           Document[]
  filterPresets       FilterPreset[]
  activities          Activity[]

  @@map("users")
}

enum Role {
  ADMIN
  LECTURER
  STUDENT
}

// ============================================================================
// PROJECTS & RESEARCH MANAGEMENT
// ============================================================================

model Project {
  id              String    @id @default(uuid())
  title           String
  description     String    @db.Text
  lecturerId      String    @map("lecturer_id")
  status          ProjectStatus @default(IN_PROGRESS)
  startDate       DateTime  @map("start_date")
  endDate         DateTime? @map("end_date")
  progress        Int       @default(0)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  lecturer        User      @relation("LecturerProjects", fields: [lecturerId], references: [id], onDelete: Restrict)
  students        ProjectStudent[]
  tasks           Task[]
  documents       Document[]
  aiQueries       AIQuery[]
  notifications   Notification[]
  activities      Activity[]

  @@index([lecturerId])
  @@map("projects")
}

model ProjectStudent {
  id        String   @id @default(uuid())
  projectId String   @map("project_id")
  studentId String   @map("student_id")
  role      String   @default("MEMBER") // LEAD, MEMBER
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([projectId, studentId])
  @@index([projectId])
  @@index([studentId])
  @@map("project_students")
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  CANCELLED
}

// ============================================================================
// TASKS & MILESTONES
// ============================================================================

model Task {
  id              String    @id @default(uuid())
  projectId       String    @map("project_id")
  title           String
  description     String?   @db.Text
  assigneeId      String    @map("assignee_id")
  status          TaskStatus @default(TODO)
  priority        Priority  @default(MEDIUM)
  dueDate         DateTime? @map("due_date")
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee        User      @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  comments        Comment[]
  attachments     TaskAttachment[]
  activities      Activity[]

  @@index([projectId])
  @@index([assigneeId])
  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ============================================================================
// DOCUMENTS & FILES
// ============================================================================

model Document {
  id              String    @id @default(uuid())
  projectId       String    @map("project_id")
  fileName        String    @map("file_name")
  fileUrl         String    @map("file_url")
  fileSize        Int       @map("file_size")
  mimeType        String    @map("mime_type")
  uploadedBy      String    @map("uploaded_by")
  description     String?   @db.Text
  status          DocumentStatus @default(PENDING)
  
  // AI Processing Status
  indexStatus     IndexStatus @default(PENDING) @map("index_status")
  indexedAt       DateTime?   @map("indexed_at")
  chunkCount      Int?        @map("chunk_count")
  errorMessage    String?     @map("error_message") @db.Text
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploader        User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  chunks          DocumentChunk[]
  activities      Activity[]

  @@index([projectId])
  @@index([uploadedBy])
  @@map("documents")
}

enum IndexStatus {
  PENDING
  PROCESSING
  INDEXED
  FAILED
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

// ============================================================================
// DOCUMENT CHUNKS (For RAG)
// ============================================================================

model DocumentChunk {
  id              String    @id @default(uuid())
  documentId      String    @map("document_id")
  content         String    @db.Text
  chunkIndex      Int       @map("chunk_index")
  vectorId        String    @map("vector_id")
  metadata        Json?
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@index([documentId])
  @@map("document_chunks")
}

// ============================================================================
// AI QUERIES & RESPONSES
// ============================================================================

model AIQuery {
  id              String    @id @default(uuid())
  projectId       String    @map("project_id")
  userId          String    @map("user_id")
  question        String    @db.Text
  answer          String    @db.Text
  sources         Json
  responseTime    Int       @map("response_time")
  feedback        Feedback?
  feedbackComment String?   @map("feedback_comment") @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@map("ai_queries")
}

enum Feedback {
  HELPFUL
  NOT_HELPFUL
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

model Notification {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  projectId       String?   @map("project_id")
  type            NotificationType
  title           String
  message         String    @db.Text
  isRead          Boolean   @default(false) @map("is_read")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("notifications")
}

// ============================================================================
// COMMENTS
// ============================================================================

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  taskId    String   @map("task_id")
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([authorId])
  @@map("comments")
}

// ============================================================================
// TASK ATTACHMENTS
// ============================================================================

model TaskAttachment {
  id          String   @id @default(uuid())
  taskId      String   @map("task_id")
  fileName    String   @map("file_name")
  fileUrl     String   @map("file_url")
  fileSize    Int      @map("file_size")
  mimeType    String   @map("mime_type")
  uploadedBy  String   @map("uploaded_by")
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  task      Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader  User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([uploadedBy])
  @@map("task_attachments")
}

// ============================================================================
// FILTER PRESETS
// ============================================================================

model FilterPreset {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  name        String
  description String?  @db.Text
  filters     String   @db.Text // JSON string of filter criteria
  entityType  String   @map("entity_type") // 'project', 'task', 'document'
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name, entityType])
  @@index([userId])
  @@index([entityType])
  @@index([isPublic])
  @@map("filter_presets")
}

// ============================================================================
// USER ACTIVITY TRACKING
// ============================================================================

model Activity {
  id          String      @id @default(uuid())
  userId      String      @map("user_id")
  type        ActivityType
  description String      @db.Text
  projectId   String?     @map("project_id")
  taskId      String?     @map("task_id")
  documentId  String?     @map("document_id")
  metadata    Json?       // Additional data about the activity
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  document    Document?   @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([projectId])
  @@map("activities")
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  DOCUMENT_UPLOADED
  DOCUMENT_UPDATED
  COMMENT_ADDED
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_JOINED
  USER_LOGIN
  USER_LOGOUT
}

enum NotificationType {
  DOCUMENT_UPLOADED
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT_ADDED
  DEADLINE_APPROACHING
  PROJECT_STATUS_CHANGED
}
